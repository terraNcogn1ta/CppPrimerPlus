(1)

char actors[30];
short betsie[100];
floar chuck[13];
long double dipsea[64];

(2)

#include <array>
array <char, 30> actors;
array <short, 100> betsie;
array <float, 13> chuck;
array <long double, 75> dipsea;

(3)

int arr[5] = {1, 3, 5, 7, 9};

(4)

even = arr[0] + arr[4];

(5)

std::cout << ideas[1];

(6)

char cheeseburger[] = "cheeseburger";

(7)

#include <string>
std::string calo = "Walforf Salad";

(8)

struct fish
{
char type[20];
int weight;
double inches;
};

(9)

fish test = {"huy", 2, 4.5};

(10)

enum Response { Yes = 1, No = 0, Maybe = 2 };
OR
enum Response {No, Yes, Maybe};

(11)

double ted = 4.5;
double *p = &ted;
std::cout << *p;

(12)

float treacle[10] = {0.5};
treacle[9] = {1.5};
float *p = treacle;
std::cout << *p << " " << *(p + 9);

(13)

1) 	int input;
	cout << "Type in the capacity of an array: __ \b\b";
	cin >> input;
	int* p = new int [input];
	delete[] p;

2) #include <vector>
   int input;
cout << "Type in the capacity of an array: __ \b\b";
cin >> input;
vector<int> vectoric_arrray(input);

(14)

Yes, it is valid.The expression "Home of the jolly bytes" is a string constant;
hence it evaluates as the address of the beginning of the string.The cout object
interprets the address of a char as an invitation to print a string, but the type cast
(int *) converts the address to type pointer-to-int, which is then printed as an
address. In short, the statement prints the address of the string,assuming the int
type is wide enough to hold an address.

(15)
	struct fish
	{
		char kind[20];
		int weight;
		float length;
	};

	fish* pole = new fish;
	cout << "Type a value for the kind member of this structure: __\b\b";
	cin >> pole->kind;


(16)

if input is too-long, crush is expected (even when input is 80 letters long, cause the last one is expected to be \0)
but the problem with no-time-for-second-input will be fixed.

{Using cin >> address causes a program to skip over whitespace until it finds nonwhitespace. It then reads characters until it encounters whitespace again.Thus, it
will skip over the newline following the numeric input,avoiding that problem. On
the other hand, it will read just a single word, not an entire line}

(17)

#include <vector>
#include <array>
#include <string>

int main()
{
	const int amount = 10;
	std::vector<std::string> strings1(amount);
	std::array<std::string, amount> strings2;
	return 0;
}

